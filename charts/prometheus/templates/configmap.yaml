apiVersion: v1
kind: ConfigMap
metadata:
    name: config-cm
data:
{{- range $i, $v := .Values.configs }}
    {{ $queryJsonFile := (empty $v.queries) | ternary  "" (printf "config-%d.json" $i) }}
    {{ printf "config-%d.ini" $i }}: |-
        [prometheus]
        ## prometheus info
        # required
        prometheus_uri = {{ $v.prometheus.uri | default "http://prometheus-server.monitor" }}
        # Basic Authentication
        user = {{ $v.prometheus.user }}
        password = {{ $v.prometheus.password }}
        # True or False
        verify_certs = {{ $v.prometheus.verify_certs | default false }}
        # path to ca bundle
        ca_certs = {{ $v.prometheus.ca_certs }}
        # path to client cert
        client_cert = {{ $v.prometheus.client_cert }}
        # path to client key
        client_key = {{ $v.prometheus.client_key }}

        ## metrics
        # Prometheus query used to query all the needed metrics. If not set, it will use `{__name__=~".+"}` to query all metrics.
        prometheus_query = {{ $v.prometheus.prometheus_query }}

        # If prometheus_query is set, this is the batch size of metrics to query in one request. Keep it empty if you want to query all metrics in one request.
        prometheus_query_metric_batch_size = {{ $v.prometheus.prometheus_query_metric_batch_size }}

        # The json file contains the prometheus query. For each json object, it contains "query", optional "metric_name" and optional "instance_fields" string array.
        # For example: prometheus_query_json = prometheus_query.json
        prometheus_query_json = {{ $queryJsonFile }}
        # metric's name field, Multiple fields are separated by commas. EX: __name__, job, the metric name =  {__name__}_{job}
        metrics_name_field = {{ $v.prometheus.metrics_name_field }}
        # history data time config. If these options is set, the agent will query results by time range
        # time range, Example: 2020-04-14 00:00:00,2020-04-15 00:00:00
        his_time_range = {{ $v.prometheus.his_time_range }}

        # raw, rawtail, csv, csvtail, xls, xlsx, json, jsontail, avro, or xml
        # *tail formats keep track of the current file & position + completed files in [state] below
        data_format = {{ $v.prometheus.data_format | default "json" }}

        ## message parsing
        # timestamp format, as library [arrow]. multiple fields can be formatted together to create the timestamp a la `YYYY-MM-DD HH:mm:ss ZZ`. If multiple fields could contain the timestamp, a comma-delimited list may be entered (no value of which may use the aforementioned {formatting}), of which the first found will be selected (treating the list as a priority list). ex `timestamp1,timestamp2`
        timestamp_format = {{ $v.prometheus.timestamp_format }}
        # timezone, as per pytz
        timezone = {{ $v.prometheus.timezone }}
        timestamp_field = {{ $v.prometheus.timestamp_field }}
        # Timezone of the timestamp data to be sent and stored in target DB (InsightFinder). Default is UTC. Only if you wish the data to be stored in other time zones in InsightFinder, this field should be specified to be the desired time zone.
        target_timestamp_timezone = {{ $v.prometheus.target_timestamp_timezone | default "UTC" }}
        component_field = {{ $v.prometheus.component_field }}
        # Default component name if component_field is not set or field value is empty.
        default_component_name = {{ $v.prometheus.default_component_name }}
        # if no instance given, will set to 'Application'. Can also set instance name from multiple fields which separated by commas. Ex: instance_name_part1,instance_name_part2.
        instance_field = {{ $v.prometheus.instance_field | default "instance" }}
        # field names used to get host id
        dynamic_host_field = {{ $v.prometheus.dynamic_host_field }}
        # instance_whitelist is a regex string used to define which instances will be filtered.
        instance_whitelist = {{ $v.prometheus.instance_whitelist }}
        # Field name of device. Can also set device name from multiple fields which separated by commas. Ex: device_name_part1,device_name_part2.
        device_field = {{ $v.prometheus.device_field }}
        # The connector for build `instance_field` or `device_field` from multiple fields. Default is `-`.
        instance_connector = {{ $v.prometheus.instance_connector }}
        # number of thread to used in the pool, default is 20
        thread_pool = {{ $v.prometheus.thread_pool | default 20 }}
        # number of the worker processes, default is count_of_cpu * 4
        processes = {{ $v.prometheus.processes }}
        # minutes the main process wait for workers to finish, default is 5
        timeout = {{ $v.prometheus.timeout | default 5 }}

        ## proxy
        agent_http_proxy = {{ $v.prometheus.agent_http_proxy }}
        agent_https_proxy = {{ $v.prometheus.agent_https_proxy }}

        [insightfinder]
        user_name = {{ $v.insightfinder.user_name }}
        license_key = {{ $v.insightfinder.license_key }}
        token = {{ $v.insightfinder.token }}
        # Name of the project created in the InsightFinder UI, If this project is not exist, agent will create it automatically.
        project_name = {{ $v.insightfinder.project_name }}
        # Name of system owned by project. If project_name is not exist in InsightFinder, agent will create a new system automatically from this field or project_name.
        system_name = {{ $v.insightfinder.system_name }}
        # metric, metricreplay, log, logreplay, alert, alertreplay, incident, incidentreplay, deployment, deploymentreplay, trace, tracereplay
        project_type = {{ $v.insightfinder.project_type | default "metric" }}
        # Set to `YES` if project is container.
        containerize = {{ $v.insightfinder.containerize | default "no" }}

        # Set to empty to create normal projects
        # set to 'vm' to use 'DynamicVM' as the AgentType, set to 'host' to use 'DynamicHost' as the AgentType
        dynamic_metric_type = {{ $v.insightfinder.containerize }}

        sampling_interval = {{ $v.insightfinder.sampling_interval | default 5 }}
        run_interval = {{ $v.insightfinder.run_interval | default 5 }}
        # what size to limit chunks sent to IF to, as kb
        chunk_size_kb = {{ $v.insightfinder.chunk_size_kb | default 2048 }}
        if_url = {{ $v.insightfinder.if_url }}
        if_http_proxy = {{ $v.insightfinder.if_http_proxy }}
        if_https_proxy = {{ $v.insightfinder.if_http_proxy }}

    {{- with $queryJsonFile }}
    {{ $queryJsonFile }}: |-
        {{ $v.queries | toJson }}
    {{- end }}
{{- end }}